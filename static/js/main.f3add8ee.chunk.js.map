{"version":3,"sources":["Header/index.js","Footer/index.js","FormContainer/index.js","Form/index.js","Result/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","FormContainer","children","Form","calculateResult","useState","amount","setAmount","firstCurrency","setFirstCurrency","secondCurrency","setSecondCurrency","onSubmit","event","preventDefault","required","type","step","min","max","value","onChange","target","Result","result","App","setResult","valueInPLN","resultValue","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sVAQeA,G,MALA,kBACX,4BAAQC,UAAU,UACd,uBAAGA,UAAU,qBAAb,wBCGOC,G,MALA,kBACX,4BAAQD,UAAU,UAAlB,yBCEWE,G,MAHO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAClB,0BAAMH,UAAU,iBAAiBG,KC0DtBC,G,MA3DF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAAsB,EACNC,mBAAS,IADH,mBAC3BC,EAD2B,KACnBC,EADmB,OAEQF,mBAAS,IAFjB,mBAE3BG,EAF2B,KAEZC,EAFY,OAGUJ,mBAAS,IAHnB,mBAG3BK,EAH2B,KAGXC,EAHW,KASlC,OACI,0BAAMC,SALW,SAACC,GAClBA,EAAMC,iBACNV,EAAgBE,EAAQE,EAAeE,IAGTX,UAAU,QACpC,8BAAUA,UAAU,kBAChB,4BAAQA,UAAU,gBAAlB,2BACA,2BAAOA,UAAU,eACb,0BAAMA,UAAU,mBAAhB,UACA,2BACIgB,UAAQ,EACRC,KAAK,SACLC,KAAK,OACLC,IAAI,IACJC,IAAI,SACJpB,UAAU,cACVqB,MAAOd,EACPe,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBf,EAAUe,EAAOF,WAGnD,2BAAOrB,UAAU,eACb,0BAAMA,UAAU,mBAAhB,qBACA,4BACIA,UAAU,eACVqB,MAAOZ,EACPa,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBb,EAAiBa,EAAOF,SAElD,iCACA,uCACA,uCACA,yCAIR,2BAAOrB,UAAU,eACb,0BAAMA,UAAU,mBAAhB,sBACA,4BACIA,UAAU,eACVqB,MAAOV,EACPW,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBX,EAAkBW,EAAOF,SAEnD,iCACA,uCACA,uCACA,yCAIR,4BAAQrB,UAAU,gBAAlB,mBCnDDwB,G,MAHA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACd,OAAOA,GAAU,uBAAGzB,UAAU,UAAUyB,KCwD7BC,EArDH,WAAO,IAAD,EACcpB,mBAAS,IADvB,mBACPmB,EADO,KACCE,EADD,KAyCd,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAMtB,gBA3CM,SAACE,EAAQE,EAAeE,GAC5C,IAEIiB,EACAC,EACJ,OAAQpB,GACJ,IAAK,MACDmB,EAAarB,EACb,MACJ,IAAK,MACDqB,EARI,KAQSrB,EACb,MACJ,IAAK,MACDqB,EAZI,KAYSrB,EAKrB,OAAQI,GACJ,IAAK,MACDkB,EAAcD,EACd,MACJ,IAAK,MACDC,EAAcD,EArBV,KAsBJ,MACJ,IAAK,MACDC,EAAcD,EAzBV,KA8BZD,EAAU,6BAAD,OAEHE,EAAYC,QAAQ,GAFjB,0BAGHnB,EAHG,mDAaD,kBAAC,EAAD,CAAQc,OAAQA,KAEpB,kBAAC,EAAD,QC3CQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f3add8ee.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\"\n\nconst Header = () => (\n    <header className=\"header\">\n        <p className=\"header__paragraph\">Kantor na pniu :)</p>\n    </header>\n)\nexport default Header;","import React from 'react';\nimport \"./style.css\"\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        Paweł Szymczak\n    </footer>\n)\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nconst FormContainer = ({ children }) => (\n    <main className=\"formContainer\">{children}</main>\n)\nexport default FormContainer;","import React, { useState } from 'react';\nimport \"./style.css\"\n\nconst Form = ({ calculateResult }) => {\n    const [amount, setAmount] = useState(\"\");\n    const [firstCurrency, setFirstCurrency] = useState(\"\");\n    const [secondCurrency, setSecondCurrency] = useState(\"\");\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        calculateResult(amount, firstCurrency, secondCurrency);\n    }\n    return (\n        <form onSubmit={onFormSubmit} className=\"form\">\n            <fieldset className=\"form__fieldset\">\n                <legend className=\"form__legend\">Wymień walutę</legend>\n                <label className=\"form__label\">\n                    <span className=\"form__labelText\">Kwota:</span>\n                    <input\n                        required\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"1\"\n                        max=\"999999\"\n                        className=\"form__input\"\n                        value={amount}\n                        onChange={({ target }) => setAmount(target.value)}\n                    />\n                </label>\n                <label className=\"form__label\">\n                    <span className=\"form__labelText\">Posiadana waluta:</span>\n                    <select\n                        className=\"form__select\"\n                        value={firstCurrency}\n                        onChange={({ target }) => setFirstCurrency(target.value)}\n                    >\n                        <option></option>\n                        <option>PLN</option>\n                        <option>EUR</option>\n                        <option>USD</option>\n                        \n                    </select>\n                </label>\n                <label className=\"form__label\">\n                    <span className=\"form__labelText\">Oczekiwana waluta:</span>\n                    <select\n                        className=\"form__select\"\n                        value={secondCurrency}\n                        onChange={({ target }) => setSecondCurrency(target.value)}\n                    >\n                        <option></option>\n                        <option>PLN</option>\n                        <option>EUR</option>\n                        <option>USD</option>\n                        \n                    </select>\n                </label>\n                <button className=\"form__button\">Wymień</button>\n            </fieldset>\n        </form>\n    )\n}\nexport default Form;","import React from 'react';\nimport \"./style.css\"\n\nconst Result = ({ result }) => {\n    return result && <p className=\"result\">{result}</p>\n}\nexport default Result;","import React, { useState } from 'react';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport FormContainer from \"./FormContainer\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\n\nconst App = () => {\n    const [result, setResult] = useState(\"\");\n    const calculateResult = (amount, firstCurrency, secondCurrency) => {\n        const eur = 4.48;\n        const usd = 3.92;\n        let valueInPLN;\n        let resultValue;\n        switch (firstCurrency) {\n            case \"PLN\":\n                valueInPLN = amount;\n                break;\n            case \"USD\":\n                valueInPLN = amount * usd;\n                break;\n            case \"EUR\":\n                valueInPLN = amount * eur;\n                break;\n\n            default:\n        }\n        switch (secondCurrency) {\n            case \"PLN\":\n                resultValue = valueInPLN;\n                break;\n            case \"USD\":\n                resultValue = valueInPLN / usd;\n                break;\n            case \"EUR\":\n                resultValue = valueInPLN / eur;\n                break;\n\n            default:\n        }\n        setResult(\n            `Otrzymujesz \n            ${resultValue.toFixed(2)} \n            ${secondCurrency}. \n            Nie wydawaj za dużo :)`\n        );\n    }\n\n    return (\n        <>\n            <Header />\n            <FormContainer>\n                <Form calculateResult={calculateResult} />\n                <Result result={result} />\n            </FormContainer>\n            <Footer />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}